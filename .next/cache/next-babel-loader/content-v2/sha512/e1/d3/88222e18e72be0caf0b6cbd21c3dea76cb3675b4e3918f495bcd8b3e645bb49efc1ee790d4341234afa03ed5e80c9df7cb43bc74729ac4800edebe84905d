{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emil/Desktop/React-JS Course/next-app-2/pages/index.js\";\n// import { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n} // let's say the data array is on an external db and we need to use fetch to get it\n//  in Reactjs we will define a state\n// create useEffect to fetch the data\n// update the state value with the request response data\n// then pass the array to MeetupList\n// this will create a problem -> next will render the html page then the useEffect will be triggered\n// that is bad for SEO\n// to fix that we will use static props function\n// this function is made by next and it should be named getStaticProps()\n// what will happen is that next will execute the function before rendering the html page\n// by that we can fetch the data with that function -> then render the page\n// and we are using async to stop the browser from rendering the page before getting the async promise\n// this method called ----- Static Site Generating SSG ---------\n\n\n_c = HomePage;\n// // the other method is ----------- Server Side Rendering SSR  -----------\n// // this method means that the server will execute the function after building the site\n// // runs only on the server and the name should be getServerSideProps()\n// // here no need for revalidate bcz the server will rerender on the data change\n// // use this method only if the data is changeing alot like every second or if we nned access to context.req or res\n// export async function getServerSideProps(context) {\n//   const req = context.req;  // not available for getStaticProps\n//   const res = context.res;  // not available for getStaticProps\n//   // fetch the data here\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/emil/Desktop/React-JS Course/next-app-2/pages/index.js"],"names":["MeetupList","HomePage","props","meetups"],"mappings":";;AAAA;AAEA,OAAOA,UAAP,MAAuB,kCAAvB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAhBSF,Q;AA8CT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,QAAf","sourcesContent":["// import { MongoClient } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nfunction HomePage(props) {\n  return <MeetupList meetups={props.meetups} />;\n}\n\n// let's say the data array is on an external db and we need to use fetch to get it\n//  in Reactjs we will define a state\n// create useEffect to fetch the data\n// update the state value with the request response data\n// then pass the array to MeetupList\n// this will create a problem -> next will render the html page then the useEffect will be triggered\n// that is bad for SEO\n// to fix that we will use static props function\n// this function is made by next and it should be named getStaticProps()\n// what will happen is that next will execute the function before rendering the html page\n// by that we can fetch the data with that function -> then render the page\n// and we are using async to stop the browser from rendering the page before getting the async promise\n// this method called ----- Static Site Generating SSG ---------\n\nexport async function getStaticProps() {\n  // next will create a server side bundle for this section of the code -> it's safe also to use the credentials here\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n \n  // it's very important to return an object here\n  return {\n    props: {\n      meetups: meetups.map((el) => ({\n        title: el.title,\n        address: el.address,\n        image: el.image,\n        description: el.description,\n        id: el._id.toString(),\n      })),\n    }, // the props here will be passed to the component props\n    // this means that the server will update at least every 10 sec if there is coming requests\n    // to prevent building the project after each chnage on the data\n    revalidate: 100000, // it's not nacessary to use it\n  };\n}\n\n// // the other method is ----------- Server Side Rendering SSR  -----------\n// // this method means that the server will execute the function after building the site\n// // runs only on the server and the name should be getServerSideProps()\n// // here no need for revalidate bcz the server will rerender on the data change\n// // use this method only if the data is changeing alot like every second or if we nned access to context.req or res\n// export async function getServerSideProps(context) {\n//   const req = context.req;  // not available for getStaticProps\n//   const res = context.res;  // not available for getStaticProps\n//   // fetch the data here\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}