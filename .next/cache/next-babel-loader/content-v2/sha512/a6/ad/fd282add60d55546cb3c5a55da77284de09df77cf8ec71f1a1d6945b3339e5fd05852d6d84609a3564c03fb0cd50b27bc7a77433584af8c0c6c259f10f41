{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emil/Desktop/React-JS Course/next-app-2/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetupDetailPage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    description: props.meetupData.description,\n    address: props.meetupData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n} // it should be called getStaticPaths()\n\n\nexport async function getStaticPaths() {\n  // Here we are defining a static paths to be preloaded at the bigenning\n  // in the future these ids should be fetching to prevent hard coding it\n  const client = await MongoClient.connect(\"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); //empty object means give me all the objects -> this is the filter criteria\n  // only fetch the id\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // fallback is required to tell next if we defined all paths ids or some of them\n    //  if true next will handle coming requests paths ids\n    // false then anything outside the paths array will be redirected to 404\n    fallback: false,\n    paths: meetups.map(element => ({\n      params: {\n        meetupId: element._id.toString()\n      }\n    }))\n  };\n} // here we will see an error about static paths ? why\n// because this is a dynamic page and next want to generate all meetupId before rendering the page\n// we need to use getStaticPaths function in this case\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // meetupId because the folder named [meetupId]\n\n  const client = await MongoClient.connect(\"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); //empty object means give me all the objects -> this is the filter criteria\n  // only fetch the id\n\n  const meetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: meetup\n  };\n}\nexport default MeetupDetailPage;","map":{"version":3,"sources":["/Users/emil/Desktop/React-JS Course/next-app-2/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetails","MongoClient","MeetupDetailPage","props","meetupData","image","title","description","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","element","params","meetupId","toString","getStaticProps","context","meetup","findOne"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,WAAW,EAAEH,KAAK,CAACC,UAAN,CAAiBG,WAHhC;AAIE,IAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA;AAEA,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,iHADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CATqC,CAWrC;AACA;;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACL;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,KAJL;AAKLC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,OAAD,KAAc;AAC/BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,OAAO,CAACN,GAAR,CAAYS,QAAZ;AAAZ;AADuB,KAAd,CAAZ;AALF,GAAP;AASD,C,CAED;AACA;AACA;;AAEA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAD4C,CACF;;AAE1C,QAAMf,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,iHADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAR4C,CAU5C;AACA;;AACA,QAAMe,MAAM,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,CAArB;AACAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE0B;AADF,GAAP;AAGD;AACD,eAAe3B,gBAAf","sourcesContent":["import { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetupDetailPage(props) {\n  return (\n    <MeetupDetails\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      description={props.meetupData.description}\n      address={props.meetupData.address}\n    />\n  );\n}\n\n// it should be called getStaticPaths()\nexport async function getStaticPaths() {\n  // Here we are defining a static paths to be preloaded at the bigenning\n  // in the future these ids should be fetching to prevent hard coding it\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //empty object means give me all the objects -> this is the filter criteria\n  // only fetch the id\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n  return {\n    // fallback is required to tell next if we defined all paths ids or some of them\n    //  if true next will handle coming requests paths ids\n    // false then anything outside the paths array will be redirected to 404\n    fallback: false,\n    paths: meetups.map((element) => ({\n      params: { meetupId: element._id.toString() },\n    })),\n  };\n}\n\n// here we will see an error about static paths ? why\n// because this is a dynamic page and next want to generate all meetupId before rendering the page\n// we need to use getStaticPaths function in this case\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // meetupId because the folder named [meetupId]\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //empty object means give me all the objects -> this is the filter criteria\n  // only fetch the id\n  const meetup = await meetupsCollection.findOne({ _id: meetupId });\n  client.close();\n  return {\n    props: meetup,\n  };\n}\nexport default MeetupDetailPage;\n"]},"metadata":{},"sourceType":"module"}