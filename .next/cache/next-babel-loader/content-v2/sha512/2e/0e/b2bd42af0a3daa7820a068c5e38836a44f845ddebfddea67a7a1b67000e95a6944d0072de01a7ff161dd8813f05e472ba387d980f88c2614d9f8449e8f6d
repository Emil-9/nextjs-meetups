{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emil/Desktop/React-JS Course/next-app-2/pages/index.js\";\n// import { MongoClient } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n} // let's say the data array is on an external db and we need to use fetch to get it\n//  in Reactjs we will define a state\n// create useEffect to fetch the data\n// update the state value with the request response data\n// then pass the array to MeetupList\n// this will create a problem -> next will render the html page then the useEffect will be triggered\n// that is bad for SEO\n// to fix that we will use static props function\n// this function is made by next and it should be named getStaticProps()\n// what will happen is that next will execute the function before rendering the html page\n// by that we can fetch the data with that function -> then render the page\n// and we are using async to stop the browser from rendering the page before getting the async promise\n// this method called ----- Static Site Generating SSG ---------\n\n\nexport async function getStaticProps() {\n  // next will create a server side bundle for this section of the code -> it's safe also to use the credentials here\n  const client = await MongoClient.connect(\"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); // it's very important to return an object here\n\n  return {\n    props: {\n      meetups: meetups.map(el => ({\n        title: el.title,\n        address: el.address,\n        image: el.image,\n        description: el.description,\n        id: el._id.toString()\n      }))\n    },\n    // the props here will be passed to the component props\n    // this means that the server will update at least every 10 sec if there is coming requests\n    // to prevent building the project after each chnage on the data\n    revalidate: 100000 // it's not nacessary to use it\n\n  };\n} // // the other method is ----------- Server Side Rendering SSR  -----------\n// // this method means that the server will execute the function after building the site\n// // runs only on the server and the name should be getServerSideProps()\n// // here no need for revalidate bcz the server will rerender on the data change\n// // use this method only if the data is changeing alot like every second or if we nned access to context.req or res\n// export async function getServerSideProps(context) {\n//   const req = context.req;  // not available for getStaticProps\n//   const res = context.res;  // not available for getStaticProps\n//   // fetch the data here\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/emil/Desktop/React-JS Course/next-app-2/pages/index.js"],"names":["MongoClient","MeetupList","Fragment","Head","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","el","title","address","image","description","id","_id","toString","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,iHADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AACAN,EAAAA,MAAM,CAACO,KAAP,GATqC,CAWrC;;AACA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,EAAD,KAAS;AAC5BC,QAAAA,KAAK,EAAED,EAAE,CAACC,KADkB;AAE5BC,QAAAA,OAAO,EAAEF,EAAE,CAACE,OAFgB;AAG5BC,QAAAA,KAAK,EAAEH,EAAE,CAACG,KAHkB;AAI5BC,QAAAA,WAAW,EAAEJ,EAAE,CAACI,WAJY;AAK5BC,QAAAA,EAAE,EAAEL,EAAE,CAACM,GAAH,CAAOC,QAAP;AALwB,OAAT,CAAZ;AADJ,KADF;AASF;AACH;AACA;AACAC,IAAAA,UAAU,EAAE,MAZP,CAYe;;AAZf,GAAP;AAcD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAerB,QAAf","sourcesContent":["// import { MongoClient } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nfunction HomePage(props) {\n  return (\n    <Fragment>\n      <Head>\n        <title>\n          Meetups\n        </title>\n      </Head>\n      <MeetupList meetups={props.meetups} />\n    </Fragment>\n  );\n}\n\n// let's say the data array is on an external db and we need to use fetch to get it\n//  in Reactjs we will define a state\n// create useEffect to fetch the data\n// update the state value with the request response data\n// then pass the array to MeetupList\n// this will create a problem -> next will render the html page then the useEffect will be triggered\n// that is bad for SEO\n// to fix that we will use static props function\n// this function is made by next and it should be named getStaticProps()\n// what will happen is that next will execute the function before rendering the html page\n// by that we can fetch the data with that function -> then render the page\n// and we are using async to stop the browser from rendering the page before getting the async promise\n// this method called ----- Static Site Generating SSG ---------\n\nexport async function getStaticProps() {\n  // next will create a server side bundle for this section of the code -> it's safe also to use the credentials here\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n\n  // it's very important to return an object here\n  return {\n    props: {\n      meetups: meetups.map((el) => ({\n        title: el.title,\n        address: el.address,\n        image: el.image,\n        description: el.description,\n        id: el._id.toString(),\n      })),\n    }, // the props here will be passed to the component props\n    // this means that the server will update at least every 10 sec if there is coming requests\n    // to prevent building the project after each chnage on the data\n    revalidate: 100000, // it's not nacessary to use it\n  };\n}\n\n// // the other method is ----------- Server Side Rendering SSR  -----------\n// // this method means that the server will execute the function after building the site\n// // runs only on the server and the name should be getServerSideProps()\n// // here no need for revalidate bcz the server will rerender on the data change\n// // use this method only if the data is changeing alot like every second or if we nned access to context.req or res\n// export async function getServerSideProps(context) {\n//   const req = context.req;  // not available for getStaticProps\n//   const res = context.res;  // not available for getStaticProps\n//   // fetch the data here\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}