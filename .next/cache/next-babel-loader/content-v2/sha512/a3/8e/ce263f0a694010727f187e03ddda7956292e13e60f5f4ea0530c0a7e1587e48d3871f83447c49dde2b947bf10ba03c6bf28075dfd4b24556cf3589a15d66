{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emil/Desktop/React-JS Course/next-app-2/pages/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"First Meetup\",\n  image: \"https://media.istockphoto.com/id/1077771776/photo/detail-of-a-steel-joint-on-the-fa%C3%A7ade-of-a-modern-building.webp?s=612x612&w=is&k=20&c=o9PMPINHlQlFIbVxO0z6Fj4EAj3DaRgXSrLmoel3kOk=\",\n  address: \"Dubai, UAE\",\n  description: \"This is a meetup description\"\n}, {\n  id: \"m2\",\n  title: \"Second Meetup\",\n  image: \"https://media.istockphoto.com/id/1077771776/photo/detail-of-a-steel-joint-on-the-fa%C3%A7ade-of-a-modern-building.webp?s=612x612&w=is&k=20&c=o9PMPINHlQlFIbVxO0z6Fj4EAj3DaRgXSrLmoel3kOk=\",\n  address: \"Dubai, UAE\",\n  description: \"This is a meetup description\"\n}, {\n  id: \"m3\",\n  title: \"Third Meetup\",\n  image: \"https://media.istockphoto.com/id/1077771776/photo/detail-of-a-steel-joint-on-the-fa%C3%A7ade-of-a-modern-building.webp?s=612x612&w=is&k=20&c=o9PMPINHlQlFIbVxO0z6Fj4EAj3DaRgXSrLmoel3kOk=\",\n  address: \"Dubai, UAE\",\n  description: \"This is a meetup description\"\n}];\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n} // let's say the data array is on an external db and we need to use fetch to get it\n//  in Reactjs we will define a state\n// create useEffect to fetch the data\n// update the state value with the request response data\n// then pass the array to MeetupList\n// this will create a problem -> next will render the html page then the useEffect will be triggered\n// that is bad for SEO\n// to fix that we will use static props function\n// this function is made by next and it should be named getStaticProps()\n// what will happen is that next will execute the function before rendering the html page\n// by that we can fetch the data with that function -> then render the page\n// and we are using async to stop the browser from rendering the page before getting the async promise\n// this method called ----- Static Site Generating SSG ---------\n\n\nexport async function getStaticProps() {\n  // next will create a server side bundle for this section of the code -> it's safe also to use the credentials here\n  const client = await MongoClient.connect(\"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(meetups);\n  client.close(); // it's very important to return an object here\n\n  return {\n    props: {\n      meetups: DUMMY_MEETUPS\n    },\n    // props: {\n    //   meetups: meetups.map((el) => ({\n    //     title: el.title,\n    //     address: el.address,\n    //     image: el.image,\n    //     description: el.description,\n    //     id: el._id.toString(),\n    //   })),\n    // }, // the props here will be passed to the component props\n    // this means that the server will update at least every 10 sec if there is coming requests\n    // to prevent building the project after each chnage on the data\n    revalidate: 100000 // it's not nacessary to use it\n\n  };\n} // // the other method is ----------- Server Side Rendering SSR  -----------\n// // this method means that the server will execute the function after building the site\n// // runs only on the server and the name should be getServerSideProps()\n// // here no need for revalidate bcz the server will rerender on the data change\n// // use this method only if the data is changeing alot like every second or if we nned access to context.req or res\n// export async function getServerSideProps(context) {\n//   const req = context.req;  // not available for getStaticProps\n//   const res = context.res;  // not available for getStaticProps\n//   // fetch the data here\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/emil/Desktop/React-JS Course/next-app-2/pages/index.js"],"names":["MongoClient","MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","console","log","close","revalidate"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,KAAK,EACH,2LAJJ;AAKEC,EAAAA,OAAO,EAAE,YALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,KAAK,EACH,2LAJJ;AAKEC,EAAAA,OAAO,EAAE,YALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,EAiBpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,KAAK,EACH,2LAJJ;AAKEC,EAAAA,OAAO,EAAE,YALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAjBoB,CAAtB;;AA2BA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACnB,iHADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACAE,EAAAA,MAAM,CAACS,KAAP,GAVqC,CAWrC;;AACA,SAAO;AACLZ,IAAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAER;AAAV,KADF;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAoB,IAAAA,UAAU,EAAE,MAbP,CAae;;AAbf,GAAP;AAeD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAed,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nconst DUMMY_MEETUPS = [\n  {\n    id: \"m1\",\n    title: \"First Meetup\",\n    image:\n      \"https://media.istockphoto.com/id/1077771776/photo/detail-of-a-steel-joint-on-the-fa%C3%A7ade-of-a-modern-building.webp?s=612x612&w=is&k=20&c=o9PMPINHlQlFIbVxO0z6Fj4EAj3DaRgXSrLmoel3kOk=\",\n    address: \"Dubai, UAE\",\n    description: \"This is a meetup description\",\n  },\n  {\n    id: \"m2\",\n    title: \"Second Meetup\",\n    image:\n      \"https://media.istockphoto.com/id/1077771776/photo/detail-of-a-steel-joint-on-the-fa%C3%A7ade-of-a-modern-building.webp?s=612x612&w=is&k=20&c=o9PMPINHlQlFIbVxO0z6Fj4EAj3DaRgXSrLmoel3kOk=\",\n    address: \"Dubai, UAE\",\n    description: \"This is a meetup description\",\n  },\n  {\n    id: \"m3\",\n    title: \"Third Meetup\",\n    image:\n      \"https://media.istockphoto.com/id/1077771776/photo/detail-of-a-steel-joint-on-the-fa%C3%A7ade-of-a-modern-building.webp?s=612x612&w=is&k=20&c=o9PMPINHlQlFIbVxO0z6Fj4EAj3DaRgXSrLmoel3kOk=\",\n    address: \"Dubai, UAE\",\n    description: \"This is a meetup description\",\n  },\n];\n\nfunction HomePage(props) {\n  return <MeetupList meetups={props.meetups} />;\n}\n\n// let's say the data array is on an external db and we need to use fetch to get it\n//  in Reactjs we will define a state\n// create useEffect to fetch the data\n// update the state value with the request response data\n// then pass the array to MeetupList\n// this will create a problem -> next will render the html page then the useEffect will be triggered\n// that is bad for SEO\n// to fix that we will use static props function\n// this function is made by next and it should be named getStaticProps()\n// what will happen is that next will execute the function before rendering the html page\n// by that we can fetch the data with that function -> then render the page\n// and we are using async to stop the browser from rendering the page before getting the async promise\n// this method called ----- Static Site Generating SSG ---------\n\nexport async function getStaticProps() {\n  // next will create a server side bundle for this section of the code -> it's safe also to use the credentials here\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(meetups);\n  client.close();\n  // it's very important to return an object here\n  return {\n    props: {meetups: DUMMY_MEETUPS},\n    // props: {\n    //   meetups: meetups.map((el) => ({\n    //     title: el.title,\n    //     address: el.address,\n    //     image: el.image,\n    //     description: el.description,\n    //     id: el._id.toString(),\n    //   })),\n    // }, // the props here will be passed to the component props\n    // this means that the server will update at least every 10 sec if there is coming requests\n    // to prevent building the project after each chnage on the data\n    revalidate: 100000, // it's not nacessary to use it\n  };\n}\n\n// // the other method is ----------- Server Side Rendering SSR  -----------\n// // this method means that the server will execute the function after building the site\n// // runs only on the server and the name should be getServerSideProps()\n// // here no need for revalidate bcz the server will rerender on the data change\n// // use this method only if the data is changeing alot like every second or if we nned access to context.req or res\n// export async function getServerSideProps(context) {\n//   const req = context.req;  // not available for getStaticProps\n//   const res = context.res;  // not available for getStaticProps\n//   // fetch the data here\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}