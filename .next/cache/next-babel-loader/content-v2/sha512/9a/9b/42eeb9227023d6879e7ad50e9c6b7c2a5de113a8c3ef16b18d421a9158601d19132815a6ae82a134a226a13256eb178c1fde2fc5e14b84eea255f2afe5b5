{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emil/Desktop/React-JS Course/next-app-2/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetail\";\nimport Head from 'next/head';\n\nfunction MeetupDetailPage(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetails, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      description: props.meetupData.description,\n      address: props.meetupData.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n} // it should be called getStaticPaths()\n\n\n_c = MeetupDetailPage;\nexport var __N_SSG = true;\nexport default MeetupDetailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetailPage\");","map":{"version":3,"sources":["/Users/emil/Desktop/React-JS Course/next-app-2/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetails","Head","MeetupDetailPage","props","meetupData","title","image","description","address"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AAEA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,aAAD;AACE,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAD1B;AAEE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,MAAA,WAAW,EAAEF,KAAK,CAACC,UAAN,CAAiBG,WAHhC;AAIE,MAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ5B;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,C,CAED;;;KAjBSN,gB;;AA6ET,eAAeA,gBAAf","sourcesContent":["import { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from 'next/head'\nfunction MeetupDetailPage(props) {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name=\"description\" content=\"\"/>\n      </Head>\n      <MeetupDetails\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        description={props.meetupData.description}\n        address={props.meetupData.address}\n      />\n    </Fragment>\n  );\n}\n\n// it should be called getStaticPaths()\nexport async function getStaticPaths() {\n  // Here we are defining a static paths to be preloaded at the bigenning\n  // in the future these ids should be fetching to prevent hard coding it\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //empty object means give me all the objects -> this is the filter criteria\n  // only fetch the id\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n  return {\n    // fallback is required to tell next if we defined all paths ids or some of them\n    //  if true next will handle coming requests paths ids\n    // false then anything outside the paths array will be redirected to 404\n    fallback: false,\n    paths: meetups.map((element) => ({\n      params: { meetupId: element._id.toString() },\n    })),\n  };\n}\n\n// here we will see an error about static paths ? why\n// because this is a dynamic page and next want to generate all meetupId before rendering the page\n// we need to use getStaticPaths function in this case\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // meetupId because the folder named [meetupId]\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://MONGODB_ADMIN_EMIL:xkSbrZ_S*93Muv5@cluster0.tjey8.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //empty object means give me all the objects -> this is the filter criteria\n  // only fetch the id\n  const meetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId),\n  }); // convert it from a string to object\n  client.close();\n  return {\n    props: {\n      // we had to do this because we need to edit the id again and convert it to a string -> otherwise we could do meetupData: meetup\n      meetupData: {\n        id: meetup._id.toString(),\n        title: meetup.title,\n        description: meetup.description,\n        address: meetup.address,\n        image: meetup.image,\n      },\n    },\n  };\n}\nexport default MeetupDetailPage;\n"]},"metadata":{},"sourceType":"module"}